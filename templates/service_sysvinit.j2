#!/bin/bash
{% if tomcat_version_major <= 8 %}
#
# Startup/shutdown script for tomcat application server.
#
# chkconfig: 2345 56 10
# description: Startup/shutdown script for the tomcat application server.
#

. /etc/init.d/functions

export TOMCAT_USER={{ item.user|default(tomcat_default_user_name) }}
export TOMCAT_GROUP={{ item.group|default(tomcat_default_user_group ) }}
export JAVA_HOME={{ ansible_local.java.general.java_home }}
export PATH=${PATH}:${JAVA_HOME}/bin
export CATALINA_HOME={{ tomcat_env_catalina_home }}
export CATALINA_BASE={{ item.path|default(tomcat_default_instance_path) }}/catalina/{{ item.name }}
export CATALINA_PID={{ item.path|default(tomcat_default_instance_path) }}/catalina/{{ item.name }}/{{ item.name }}.pid
export CATALINA_OPTS="{{ item.catalina_opts|default(tomcat_default_catalina_opts) }}"
{% if item.prefer_ipv4|default(tomcat_default_prefer_ipv4) %}
export CATALINA_OPTS="${CATALINA_OPTS} -Djava.net.preferIPv4Stack=true"
{% endif %}


: ${ret:=0}
LOCK=/var/run/tomcat.lock
PROC=tomcat


start(){
  echo -n $"Starting $PROC: "
{% if item.umask is defined %}
  umask {{ item.umask }}
{% endif %}
  {
    touch $CATALINA_PID
    chown ${TOMCAT_USER}.${TOMCAT_GROUP} $CATALINA_PID
  } > /dev/null 2>&1 || true
  daemon --user $TOMCAT_USER --pidfile $CATALINA_PID ${CATALINA_HOME}/bin/catalina.sh start
  ret=$?
  echo
  [ $ret -eq 0 ] && touch $LOCK
}

stop(){
  echo -n $"Stopping $PROC: "
  killproc -p $CATALINA_PID $PROC
  ret=$?
  echo
  [ $ret -eq 0 ] && rm -f $LOCK
}


case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  restart)
    stop
    start
  ;;
  status)
    status -p $CATALINA_GROUP $PROC
  ;;
  *)
    echo $"Usage: $PROC {start|stop|restart|status}"
    exit 3
  ;;
esac

exit $ret
{% else %}
#
# tomcat9      This shell script takes care of starting and stopping Tomcat
#
# chkconfig: - 80 20
#
### BEGIN INIT INFO
# Provides: tomcat9
# Required-Start: $network $syslog
# Required-Stop: $network $syslog
# Default-Start:
# Default-Stop:
# Description: Release implementation for Servlet 2.5 and JSP 2.1
# Short-Description: start and stop tomcat
### END INIT INFO
#
# - originally written by Henri Gomez, Keith Irwin, and Nicolas Mailhot
# - heavily rewritten by Deepak Bhole and Jason Corley
#

## Source function library.
#. /etc/rc.d/init.d/functions
# Source LSB function library.
if [ -r /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
else
    exit 1
fi

DISTRIB_ID=`lsb_release -i -s 2>/dev/null`

NAME="$(basename $0)"
unset ISBOOT
if [ "${NAME:0:1}" = "S" -o "${NAME:0:1}" = "K" ]; then
    NAME="${NAME:3}"
    ISBOOT="1"
fi

# Get the tomcat config (use this for environment specific settings)
TOMCAT_CFG="{{ tomcat_env_catalina_home }}/tomcat.conf"
if [ -r "$TOMCAT_CFG" ]; then
    . $TOMCAT_CFG
fi

# Get instance specific config file
if [ -r "{{ tomcat_sysconfig_dir }}/{{ item.name }}" ]; then
    . {{ tomcat_sysconfig_dir }}/{{ item.name }}
fi

# Define which connector port to use
CONNECTOR_PORT="${CONNECTOR_PORT:-8080}"

# Path to the tomcat launch script
TOMCAT_SCRIPT="{{ tomcat_env_catalina_home }}/bin/catalina.sh"

# Tomcat program name
TOMCAT_PROG="${NAME}"

# Define the tomcat username
TOMCAT_USER="${TOMCAT_USER:-oracle}"

# Define the tomcat group
TOMCAT_GROUP="${TOMCAT_GROUP:-`id -gn $TOMCAT_USER`}"

# Define the tomcat log file
TOMCAT_LOG="${TOMCAT_LOG:-/var/log/${NAME}-initd.log}"

# Define the pid file name
# If change is needed, use sysconfig instead of here
export CATALINA_PID="${CATALINA_PID:-/var/run/${NAME}.pid}"

RETVAL="0"

# For SELinux we need to use 'runuser' not 'su'
if [ -x "/sbin/runuser" ]; then
    SU="/sbin/runuser -s /bin/sh - $TOMCAT_USER"
else
    SU="/bin/su -s /bin/sh - $TOMCAT_USER"
fi

[ "$(id -nu 2>/dev/null)" = "$TOMCAT_USER" ] && SU="/bin/sh"

function parseOptions() {
    options=""
    if [ -r "$TOMCAT_CFG" ]; then
      options="$options $(
                   awk '!/^#/ && !/^$/ { ORS=" "; print "export ", $0, ";" }' \
                   $TOMCAT_CFG
               )"
    fi
    if [ -r "{{ tomcat_sysconfig_dir }}/{{ item.name }}" ]; then
        options="$options $(
                     awk '!/^#/ && !/^$/ { ORS=" "; 
                                           print "export ", $0, ";" }' \
                     {{ tomcat_sysconfig_dir }}/{{ item.name }}
                 )"
    fi
    TOMCAT_SCRIPT="$options ${TOMCAT_SCRIPT}"
}

# rhbz 757632
function version() {
    parseOptions
    $SU -c "${TOMCAT_SCRIPT} version" >> ${TOMCAT_LOG} 2>&1 || RETVAL="4"
}

# See how we were called.
function start() {

   echo "`date -R`: Starting ${TOMCAT_PROG}: " >> ${TOMCAT_LOG}
   chown ${TOMCAT_USER}:${TOMCAT_GROUP} ${TOMCAT_LOG}
   echo -n "Starting ${TOMCAT_PROG}: "
   if [ "$RETVAL" != "0" ]; then 
     log_failure_msg
     return
   fi
   if [ -f "${CATALINA_LOCK}" ]; then
        if [ -f "${CATALINA_PID}" ]; then
            read kpid < ${CATALINA_PID}
#           if checkpid $kpid 2>&1; then
            if [ -n "${kpid}" ] ; then
              if [ -d "/proc/${kpid}" ]; then
                log_success_msg
                if [ "$DISTRIB_ID" = "MandrivaLinux" ]; then
                    echo
                fi
                RETVAL="0"
                return
              fi
            else
              rm -f "${CATALINA_PID}"
            fi
        fi
    fi
    # fix permissions on the log and pid files
    touch $CATALINA_PID 2>&1 || RETVAL="4"
    if [ "$RETVAL" -eq "0" -a "$?" -eq "0" ]; then 
      chown ${TOMCAT_USER}:${TOMCAT_GROUP} $CATALINA_PID
    fi
    if [ "$?" != "0" ]; then
        RETVAL="4"
    fi
    parseOptions
    if [ "$RETVAL" -eq "0" -a "$SECURITY_MANAGER" = "true" ]; then
        $SU -c "${TOMCAT_SCRIPT} start-security" \
            >> ${TOMCAT_LOG} 2>&1 || RETVAL="4"
    else
       [ "$RETVAL" -eq "0" ] && $SU -c "${TOMCAT_SCRIPT} start" >> ${TOMCAT_LOG} 2>&1 || RETVAL="4"
    fi
    if [ "$RETVAL" -eq "0" ]; then 
        log_success_msg
        touch ${CATALINA_LOCK} && chown ${TOMCAT_USER} ${CATALINA_LOCK}
    else
        log_failure_msg "Error code ${RETVAL}"
    fi
    if [ "$DISTRIB_ID" = "MandrivaLinux" ]; then
        echo
    fi
}

function stop() {
    echo "`date -R`: Stopping ${TOMCAT_PROG}: " >> ${TOMCAT_LOG}
    echo -n "Stopping ${TOMCAT_PROG}: "
    if [ -f "${CATALINA_LOCK}" ]; then
        parseOptions
        [ -f "${CATALINA_PID}" ] && read kpid < ${CATALINA_PID}
        if [ "$RETVAL" -eq "0" ]; then
            touch ${CATALINA_LOCK} 2>&1 || RETVAL="4" && chown ${TOMCAT_USER} ${CATALINA_LOCK}
            [ "$RETVAL" -eq "0" ] && $SU -c "${TOMCAT_SCRIPT} stop" >> ${TOMCAT_LOG} 2>&1 || RETVAL="4"
        fi
        count="0"
        if [ -n "${kpid}" -a -f "${CATALINA_PID}" ]; then
           echo "waiting for processes $kpid to exit"
           until [ "$(ps --pid $kpid | grep -c $kpid)" -eq "0" ] || \
                      [ "$count" -gt "$SHUTDOWN_WAIT" ]; do
               sleep 1
               let count="${count}+1"
           done
           if [ "$count" -gt "$SHUTDOWN_WAIT" ]; then
              log_warning_msg "killing $kpid which did not stop after ${SHUTDOWN_WAIT} seconds"
               kill -9 $kpid
               RETVAL="0"
            fi
        fi
        rm -f ${CATALINA_LOCK} ${CATALINA_PID}
    fi
    [ $RETVAL -eq "0" ] && log_success_msg
    [ $RETVAL -ne "0" ] && log_failure_msg

    if [ "$DISTRIB_ID" = "MandrivaLinux" ]; then
        echo
    fi
}

function status()
{
   echo "`date -R`: Status ${TOMCAT_PROG}: " >> ${TOMCAT_LOG}
   checkpidfile 
   if [ "$RETVAL" -eq "0" ]; then
      log_success_msg "${NAME} (pid ${kpid}) is running..."
   elif [ "$RETVAL" -eq "1" ]; then
      log_failure_msg "PID file exists, but process is not running"
   else 
      checklockfile
      if [ "$RETVAL" -eq "2" ]; then
         log_failure_msg "${NAME} lockfile exists but process is not running"
      else
         pid="$(/usr/bin/pgrep -d , -u ${TOMCAT_USER} -G ${TOMCAT_GROUP} -f java.*${NAME})"
         if [ -z "$pid" ]; then
             log_success_msg "${NAME} is stopped"
             RETVAL="3"
         else
             log_success_msg "${NAME} (pid ${kpid}) is running..."
             RETVAL="0"
         fi
      fi
  fi
}

function checklockfile()
{
   if [ -f "${CATALINA_LOCK}" ]; then
      pid="$(/usr/bin/pgrep -d , -u ${TOMCAT_USER} -G ${TOMCAT_GROUP} java)"
# The lockfile exists but the process is not running
      if [ -z "$pid" ]; then
         RETVAL="2"
      fi
   fi
}

function checkpidfile()
{
   if [ -f "${CATALINA_PID}" ]; then
      read kpid < ${CATALINA_PID}
      if [ -n "${kpid}" -a -d "/proc/${kpid}" ]; then
# The pid file exists and the process is running
          RETVAL="0"
         return
      else
# The pid file exists but the process is not running
         RETVAL="1"
         return
      fi
   else
# pid file does not exist and program is not running
      RETVAL="3"
      return
  fi
}

function usage()
{
   echo "Usage: $0 {start|stop|restart|condrestart|try-restart|reload|force-reload|status|version}"
   RETVAL="2"
}

# See how we were called.
RETVAL="0"
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    condrestart|try-restart)
        if [ -f "${CATALINA_LOCK}" ]; then
            stop
            start
        fi
        ;;
    reload)
        RETVAL="3"
        ;;
    force-reload)
        if [ -f "${CATALINA_LOCK}" ]; then
            stop
            start
        fi
        ;;
    status)
        status
        ;;
    version)
        version
        #${TOMCAT_SCRIPT} version
        ;;
    *)
      usage
      ;;
esac

exit $RETVAL
{% endif %}